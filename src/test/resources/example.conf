entities: [
   {
        name: "Clean Project Companies MRR V2"
        sources: [

        {
            catalog = "data_lake.raw_project_management_projects"
            name = "raw_project_management_projects"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

        {
            catalog = "data_lake.raw_project_management_project_workers"
            name = "raw_project_management_project_workers"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

       {
            catalog = "data_lake.raw_project_management_time_records"
            name = "raw_project_management_time_records"
            format = "TABLE"
            ops = [
                    {
                     op: "dedupe"
                     idColumns = ["id"]
                      orderColumns = ["yyyy","mm","dd","updated_at"]
                     },
                     {
                      op: "prune"
                      from = ${df.previous_start_of_month}
                      to = ${df.now}
                    },
                  ]
          },

          {
            catalog = "data_lake.raw_project_management_flexible_time_records"
            name = "raw_project_management_flexible_time_records"
            format = "TABLE"
            ops = [
                    {
                     op: "dedupe"
                     idColumns = ["id"]
                      orderColumns = ["yyyy","mm","dd","updated_at"]
                     },
                     {
                      op: "prune"
                      from = ${df.previous_start_of_month}
                      to = ${df.now}
                    },
                  ]
          },

       {
            inputPath = ${dp.dl_clean_bucket}"/customers_monthly/"
            #catalog = "data_lake.clean_customers_monthly"
            name = "clean_customers_monthly"
            format = "DELTA"
            # ops = [
            #     {
            #         op: "prune"
            #         from = ${df.previous_start_of_month}
            #         to = ${df.end_of_month}
            #     }
            # ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.end_of_month}
              },
              ]
          },


        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_project_management/clean_project_companies_mrr.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/project_companies_mrr/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
    },

  {
        name: "Clean Spaces Companies MRR"
        sources: [

        {
            catalog = "data_lake.raw_space_control_bookings"
            name = "db_raw_space_control_bookings"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

         {
                catalog = "data_lake.clean_accesses"
                name = "db_clean_accesses"
                format = "TABLE"
                op.dedupe = {
                idColumns = ["access_id"]
                orderColumns = ["yyyy","mm","dd","updated_at"]
              }
            },

           {
            #catalog = "data_lake.clean_customers_monthly_extended"
            inputPath = ${dp.dl_clean_bucket}"/customers_monthly_extended/"
            name = "data_lake_clean_customers_monthly_extended"
            format = "DELTA"
            # ops = [
            #     {
            #         op: "prune"
            #         from = ${df.previous_start_of_month}
            #         to = ${df.end_of_month}
            #     }
            # ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.end_of_month}
              },
              ]
          },


        {
            catalog = "data_lake.gold_hubspot_companies"
            name = "dl_gold_hubspot_companies"
            format = "TABLE"
          },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_space_control/clean_spaces_companies_mrr.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/spaces_companies_mrr/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"

        }
    },

    {
        name: "Hellmann Data Report"
        sources: [

        {
            inputPath = ${dp.dl_raw_bucket}"/airbyte_json/HellmannData/"
            name = "hellmann_data"
            format = "JSON"
          },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_tracking/clean_hellmann_partial_report.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/hellmann_partial_report/"
          writeMode = "replace"
          format = "PARQUET"
        }
    },

    {
        name: "Clean Time Planning MRR V2"
        sources: [

        {
            catalog = "data_lake.raw_shift_management_shifts"
            name = "dl_raw_shift_management_shifts"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
             ops = [
                        {
                            op: "prune"
                            from = ${df.previous_start_of_month}
                            to = ${df.now}
                        },
                        {
                            op: "dedupe"
                            idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
                        }
                   ]
          },

         {
                catalog = "data_lake.clean_accesses"
                name = "dl_clean_accesses"
                format = "TABLE"
                op.dedupe = {
                idColumns = ["access_id"]
                orderColumns = ["yyyy","mm","dd","updated_at"]
              }
            },

       {
            #catalog = "data_lake.clean_customers_monthly_extended"
            inputPath = ${dp.dl_clean_bucket}"/customers_monthly_extended/"
            name = "data_lake_clean_customers_monthly_extended"
            format = "DELTA"
            # ops = [
            #     {
            #         op: "prune"
            #         from = ${df.previous_start_of_month}
            #         to = ${df.end_of_month}
            #     }
            # ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.end_of_month}
              },
              ]
          },

        {
            catalog = "data_lake.gold_hubspot_companies"
            name = "dl_gold_hubspot_companies"
            format = "TABLE"
          },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_planning/clean_time_planning_companies_mrr.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/time_planning_companies_mrr/"
          writeMode = "replace"
          format = "PARQUET"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
        }
    },

  {
        name: "Time Tracking Usage Daily v3"
        sources: [

        {
            catalog = "data_lake.clean_accesses"
            name = "clean_accesses"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["access_id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                }
            ]
        },

        {
            catalog = "data_lake.raw_attendance_shifts"
            name = "raw_attendance_shifts"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
                {
                        op: "prune"
                        from = ${df.start_of_yesterday}
                        to = ${df.now}
                }
            ]
        },

        {
            catalog = "data_lake.clean_active_employees_daily"
            name = "clean_active_employees_daily"
            ops = [
                {
                        op: "prune"
                        from = ${df.start_of_yesterday}
                        to = ${df.now}
                }
                ]
            format = "TABLE"
        },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_tracking/clean_time_tracking_usage_daily.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/time_tracking_usage_daily/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_day"
            }
          ]
          format = "PARQUET"
        }
    },

    {
        name: "Projects companies and users name"
        sources: [
                   {
                    inputPath = ${dp.dl_bronze_bucket}"/stream_project_management_projects/"
                    name = "db_bronze_stream_project_management_projects"
                    format = "DELTA"
                    op.dedupe = {
                    idColumns = ["id"]
                    orderColumns = ["metadata_updated_at"]
                },
          },

               {
                    inputPath = ${dp.dl_bronze_bucket}"/stream_project_management_project_workers/"
                    name = "db_bronze_stream_project_management_project_workers"
                    format = "DELTA"
            #         ops = [
            #       {
            #         op: "dedupe"
            #         idColumns = ["id"]
            #         orderColumns = ["metadata_updated_at"]
            #       },
            #       {
            #         op: "filter"
            #         onColumn = "metadata_updated_at"
            #         from = ${df.start_of_yesterday}
            #         to = ${df.now}
            #       }
            #  ]
          },



                {
                inputPath = ${dp.dl_raw_bucket}"/rds/users/"
                name = "dl_raw_users"
                format = "PARQUET"
                op.dedupe = {
                idColumns = ["id"]
                orderColumns = ["yyyy","mm","dd","updated_at"]

            }
            },
               {
                inputPath = ${dp.dl_raw_bucket}"/rds/accesses"
                name = "dl_raw_accesses"
                format = "PARQUET"
                op.dedupe = {
                idColumns = ["id"]
                orderColumns = ["yyyy","mm","dd","updated_at"]
              }
            },
               {
               inputPath = ${dp.dl_raw_bucket}"/rds/employees"
                name = "dl_raw_employees"
                format = "PARQUET"
                op.dedupe = {
                idColumns = ["id"]
                orderColumns = ["yyyy","mm","dd","updated_at"]
              }
            },


        ]
        mapping {
            file = ${dp.mappings_bucket}"/product/product_time/product_project_management/project_management_dataproduct_batch/project_management_companies_users.sql"
        }
        sink {
          name = "project_management_companies_users"
          format = "kafka"
          kafkaSecret = ${dp.environment}"/kafka_credentials"
          topic = ${dp.environment}".pub.gold.product.project.management.companies.users.json"
        }
    },

     {
        name: "Time Tracking Usage Monthly v3"
        sources: [

        {
            catalog = "data_lake.clean_accesses"
            name = "clean_accesses"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["access_id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                }
            ]
        },

        {
            catalog = "data_lake.raw_attendance_shifts"
            name = "raw_attendance_shifts"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
               }
            ]
        },

        {
            inputPath = ${dp.dl_clean_bucket}"/customers_monthly/"
            #catalog = "data_lake.clean_customers_monthly"
            name = "clean_customers_monthly"
            # ops = [
            #   {
            #         op: "prune"
            #         from = ${df.previous_start_of_month}
            #         to = ${df.end_of_month}
            #    }
            #     ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.end_of_month}
              },
              ]
            format = "DELTA"
        },

        {
            catalog = "data_lake.gold_active_employees_mth"
            name = "gold_active_employees_mth"
            ops = [
              {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
               }
                ]
            format = "TABLE"
        },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_tracking/clean_time_tracking_usage_mth.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/time_tracking_usage_mth/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
    },


    {
        name: "Time Lobby Indicators - Time Off"
        sources: [
          {
            inputPath = ${dp.dl_raw_bucket}"/airbyte/Time_Off/"
            name = "data_lake_lobby_indicators"
            format = "PARQUET"
          },
        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/time_lobby_indicators.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/lobby_indicators_time_off/"
          writeMode = "replace"
          format = "PARQUET"
        }
    },
    {
        name: "Time Lobby Indicators - Time Planning"
        sources: [
          {
            inputPath = ${dp.dl_raw_bucket}"/airbyte/Time_Planning/"
            name = "data_lake_lobby_indicators"
            format = "PARQUET"
          },
        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/time_lobby_indicators.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/lobby_indicators_time_planning/"
          writeMode = "replace"
          format = "PARQUET"
        }
    },
    {
        name: "Time Lobby Indicators - Time Tracking"
        sources: [
          {
            inputPath = ${dp.dl_raw_bucket}"/airbyte/Time_Tracking/"
            name = "data_lake_lobby_indicators"
            format = "PARQUET"
          },
        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/time_lobby_indicators.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/lobby_indicators_time_tracking/"
          writeMode = "replace"
          format = "PARQUET"
        }
    },
    {
        name: "Time Lobby Indicators - Projects"
        sources: [
          {
            inputPath = ${dp.dl_raw_bucket}"/airbyte/Projects/"
            name = "data_lake_lobby_indicators"
            format = "PARQUET"
          },
        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/time_lobby_indicators.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/lobby_indicators_projects/"
          writeMode = "replace"
          format = "PARQUET"
        }
    },


   {
        name: "Projects Usage Daily"
        sources: [

        {
            catalog = "data_lake.raw_project_management_projects"
            name = "raw_project_management_projects"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

        {
            catalog = "data_lake.raw_project_management_project_workers"
            name = "raw_project_management_project_workers"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

       {
            catalog = "data_lake.raw_project_management_time_records"
            name = "raw_project_management_time_records"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = ${df.start_of_yesterday}
                    to = ${df.now}
               }
            ]
          },

          {
            catalog = "data_lake.raw_project_management_flexible_time_records"
            name = "raw_project_management_flexible_time_records"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = ${df.start_of_yesterday}
                    to = ${df.now}
               }
            ]

          },

       {
            #catalog = "data_lake.clean_customers_daily"
            inputPath = ${dp.dl_clean_bucket}"/customers_daily/"
            name = "clean_customers_daily"
            # ops = [
            #     {
            #             op: "prune"
            #             from = ${df.start_of_yesterday}
            #             to = ${df.now}
            #     }
            #     ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.start_of_yesterday}
                      to = ${df.now}
              },
              ]
            format = "DELTA"
        },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_project_management/clean_project_management_usage_daily.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/project_management_usage_daily/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_day"
            }
          ]
          format = "PARQUET"
        }
    },

  {
        name: "Projects Usage Monthly"
        sources: [

       {
            catalog = "data_lake.raw_project_management_projects"
            name = "raw_project_management_projects"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

          {
            catalog = "data_lake.raw_attendance_shifts"
            name = "raw_attendance_shifts"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = "2022-01-01T00:00:00"
                    to = ${df.now}
               },
               {
                      op: "filter"
                      onColumn = "updated_at"
                      from = "2022-01-01T00:00:00"
                      to = ${df.end_of_month}
              },

            ]
          },
         {
            catalog = "data_lake.raw_project_management_project_workers"
            name = "raw_project_management_project_workers"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

       {
            catalog = "data_lake.raw_project_management_time_records"
            name = "raw_project_management_time_records"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
               }
            ]
          },

          {
            catalog = "data_lake.raw_project_management_flexible_time_records"
            name = "raw_project_management_flexible_time_records"
            format = "TABLE"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                }
            ]

          },

       {
            inputPath = ${dp.dl_clean_bucket}"/customers_monthly/"
            name = "clean_customers_monthly"
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.end_of_month}
              },
              ]
            format = "DELTA"
        },



        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_project_management/clean_project_management_usage_mth.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/project_management_usage_mth/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
    },

 {
        name: "Time Planning Usage Daily"
        sources: [

        {
            catalog = "data_lake.clean_accesses"
            name = "clean_accesses"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["access_id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

          {
            catalog = "data_lake.raw_shift_management_shifts"
            name = "raw_shift_management_shifts"
            format = "TABLE"
             ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                }
            ]
          },

          {
            catalog = "data_lake.clean_active_employees_daily"
            name = "clean_active_employees_daily"
            format = "TABLE"
        },


       {
            inputPath = ${dp.dl_clean_bucket}"/customers_daily/"
            name = "clean_customers_daily"
               ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.now}
              },
              {
                        op: "prune"
                        from = ${df.previous_start_of_month}
                        to = ${df.now}
                }
              ]
            format = "DELTA"
        },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_planning/clean_time_planning_usage_daily.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/time_planning_usage_daily/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_day"
            }
          ]
          format = "PARQUET"
        }
    },


      {
        name: "Time Planning Usage Monthly"
        sources: [

       {
            catalog = "data_lake.clean_time_planning_usage_daily"
            name = "clean_time_planning_usage_daily"
            # ops = [
            #     {
            #         op: "prune"
            #         from = ${df.previous_start_of_month}
            #         to = ${df.now}
            #     }
            # ]
            format = "TABLE"
        },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_planning/clean_time_planning_usage_mth.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/time_planning_usage_mth/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
    },

     {
        name: "Time Off Usage Daily"
        sources: [

        {

            inputPath = ${dp.dl_clean_bucket}"/customers_daily/"
            #catalog = "data_lake.clean_customers_daily"
            name = "clean_customers_daily"
            # ops = [
            #     {
            #             op: "prune"
            #             from = ${df.start_of_yesterday}
            #             to = ${df.now}
            #     }
            #     ]
            format = "DELTA"
        },

          {
            catalog = "data_lake.raw_leaves"
            name = "raw_leaves"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

          {
            catalog = "data_lake.clean_accesses"
            name = "clean_accesses"
            format = "TABLE"
            op.dedupe = {
              idColumns = ["access_id"]
              orderColumns = ["yyyy","mm","dd","updated_at"]
            }
          },

          {
            catalog = "data_lake.clean_active_employees_daily"
            name = "clean_active_employees_daily"
            format = "TABLE"
            # ops = [
            #     {
            #             op: "prune"
            #             from = ${df.start_of_yesterday}
            #             to = ${df.now}
            #     }
            #     ]
          },


        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_timeoff/clean_timeoff_usage_daily.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/timeoff_usage_daily/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_day"
            }
          ]
          format = "PARQUET"
        }
    },
     {
        name: "Time Off Usage Monthly"
        sources: [

       {
            catalog = "data_lake.clean_timeoff_usage_daily"
            name = "clean_timeoff_usage_daily"
            ops = [
                {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
                }
            ]
            format = "TABLE"
        },

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_timeoff/clean_timeoff_usage_mth.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/timeoff_usage_mth/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
    },

    {
        name: "Time Tracking Employees Policies"
        sources: [

       {
            catalog = "data_lake.raw_attendance_employees_settings"
            name = "raw_attendance_employees_settings"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
               }
            ]
            format = "TABLE"
        },
        {
            catalog = "data_lake.raw_attendance_employees_policies"
            name = "raw_attendance_employees_policies"
            ops = [
                {
                    op = "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy","mm","dd", "updated_at"]
                },
            ]
            format = "TABLE"
        },

        {
            inputPath = ${dp.dl_clean_bucket}"/customers_monthly/"
            #catalog = "data_lake.clean_customers_monthly"
            name = "clean_customers_monthly"
            # ops = [
            #     {
            #             op: "prune"
            #             from = ${df.previous_start_of_month}
            #             to = ${df.end_of_month}
            #     }
            #     ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.end_of_month}
              },
              ]
            format = "DELTA"
        },
        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_time/product_time_tracking/clean_attendance_employees_policies.sql"

        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/attendance_employees_policies/"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
    },

    {
        name: "Professionals Usage Daily"
        sources: [

          {
            inputPath = ${dp.dl_clean_bucket}"/customers_daily/"
            #catalog = "data_lake.clean_customers_daily"
            name = "clean_customers_daily"
            format = "DELTA"
            # ops = [
            #     {
            #         op: "prune"
            #         from = ${df.start_of_yesterday}
            #         to = ${df.now}
            #     }
            # ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.start_of_yesterday}
                      to = ${df.now}
              },
              ]

          },

          {
            catalog = "data_lake.clean_active_employees_daily"
            name = "clean_active_employees_daily"
            format = "TABLE"
            ops = [
                {
                    op: "prune"
                    from = ${df.start_of_yesterday}
                    to = ${df.now}
                }
            ]

          },

          {
            catalog = "data_lake.raw_payroll_payroll_documents"
            name = "raw_deduped_payroll_payroll_documents"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                }
            ]
          },

          {
            catalog = "data_lake.raw_documents"
            name = "raw_deduped_documents"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                }
            ]
          },

          {
            catalog = "data_lake.raw_payroll_policy_periods"
            name = "raw_deduped_payroll_policy_periods"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                }
            ]
          },

          {
            catalog = "data_lake.clean_payroll_professionals_bookeepers_by_company"
            name = "clean_payroll_professionals_bookeepers_by_company"
            format = "TABLE"
          }

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_payroll/product_payroll_professionals_exp/clean_payroll_professionals_usage_daily.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/payroll_professionals_usage_daily"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_day"
            }
          ]
          format = "PARQUET"
        }
    },

    {
        name: "Professionals Usage Month"
        sources: [

          {
            catalog = "data_lake.clean_payroll_professionals_usage_daily"
            name = "clean_payroll_professionals_usage_daily"
            format = "TABLE"
            ops = [
                {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
                }
            ]
           }

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_payroll/product_payroll_professionals_exp/clean_payroll_professionals_usage_mth.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/payroll_professionals_usage_mth"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
  },

  {
        name: "Payroll Core Usage Daily"
        sources: [

          {
            catalog = "data_lake.raw_payroll_results"
            name = "raw_payroll_results"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = ${df.start_of_yesterday}
                    to = ${df.now}
                }
            ]
          },

          {
            catalog = "data_lake.raw_payroll_policy_periods"
            name = "raw_payroll_policy_periods"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                },
            ]
          },

          {
            catalog = "data_lake.raw_payroll_result_concept_items"
            name = "raw_payroll_result_concept_items"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                }
            ]
          },

          {
            #catalog = "data_lake.clean_customers_daily"
            inputPath = ${dp.dl_clean_bucket}"/customers_daily/"
            name = "clean_customers_daily"
            format = "DELTA"
            # ops = [
            #     {
            #         op: "prune"
            #         from = ${df.start_of_yesterday}
            #         to = ${df.now}
            #     }
            # ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.start_of_yesterday}
                      to = ${df.now}
              },
              ]

          }

          {
            catalog = "data_lake.clean_active_employees_daily"
            name = "clean_active_employees_daily"
            format = "TABLE"
            ops = [
                {
                    op: "prune"
                    from = ${df.start_of_yesterday}
                    to = ${df.now}
                }
            ]

          }

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_payroll/product_payroll_core/clean_payroll_core_usage_daily.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/payroll_core_usage_daily"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_day"
            }
          ]
          format = "PARQUET"
        }
    },

     {
        name: "Payroll Core Usage Monthly"
        sources: [

          {
            catalog = "data_lake.raw_payroll_results"
            name = "raw_payroll_results"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                },
               {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
                }
            ]
          },

          {
            catalog = "data_lake.raw_payroll_policy_periods"
            name = "raw_payroll_policy_periods"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                },
            ]
          },

          {
            catalog = "data_lake.raw_payroll_result_concept_items"
            name = "raw_payroll_result_concept_items"
            format = "TABLE"
            ops = [
                {
                    op: "dedupe"
                    idColumns = ["id"]
                    orderColumns = ["yyyy", "mm", "dd", "updated_at"]
                }
            ]
          },

          {
            #catalog = "data_lake.clean_customers_monthly"
            inputPath = ${dp.dl_clean_bucket}"/customers_monthly/"
            name = "clean_customers_monthly"
            format = "DELTA"
            # ops = [
            #     {
            #         op: "prune"
            #         from = ${df.previous_start_of_month}
            #         to = ${df.end_of_month}
            #     }
            # ]
              ops = [
              {
                      op: "filter"
                      onColumn = "period_day"
                      from = ${df.previous_start_of_month}
                      to = ${df.end_of_month}
              },
              ]

          }

          {
            catalog = "data_lake.gold_active_employees_mth"
            name = "gold_active_employees_mth"
            format = "TABLE"
            ops = [
                {
                    op: "prune"
                    from = ${df.previous_start_of_month}
                    to = ${df.now}
                }
            ]

          }

        ]
        mapping {
          file = ${dp.mappings_bucket}"/product/product_payroll/product_payroll_core/clean_payroll_core_usage_mth.sql"
        }
        sink {
          outputPath = ${dp.dl_clean_bucket}"/payroll_core_usage_mth"
          writeMode = "replace"
          ops: [
            {
              op: "date_partition"
              eventDtColumn = "period_month"
            }
          ]
          format = "PARQUET"
        }
    },


]